summary(data88)
planktondata %>%
subset(Species == "Common cockles") %>%
ggplot(aes(Sample, Water.Temp)) +
geom_line() +
geom_line(data = , aes(Sample, Water.Temp),color='red')+
labs(title = "a line plot Which shows the water temperature (y axis) against the sample index (x axis)",
subtitle = "samples of common
cockles and pacific oyster. ") +
geom_smooth(formula = y ~ x,method = "lm", se = T)
data101 <- planktondata %>% select(Pseudonitzschia.A.Sp,Robgordia.Sp)
cor(data101,method = "pearson")
linear_regression_model <- lm(Pseudonitzschia.A.Sp ~ Robgordia.Sp,
data=  data101)
summary(linear_regression_model)
#linear regression model of Pseudonsitzshia.A.SP for a value of Robgordia.sp of 1000 cells per litre
cells_per_litre_1000 = -275.97689 + (9.50029*1000)
cells_per_litre_1000
#linear regression model of Pseudonsitzshia.A.SP for a value of Robgordia.sp of 2500 cells per litre
cells_per_litre_2500 = -275.97689 + (9.50029*2500)
cells_per_litre_2500
#linear regression model of Pseudonsitzshia.A.SP for a value of Robgordia.sp of 4000 cells per litre
cells_per_litre_4000  = -275.97689 + (9.50029*4000)
cells_per_litre_4000
planktondata=read.csv(file.choose(),header=T)
attach(planktondata)
group <- paste(month,year)
avg <- tapply(Water.Temp, group, mean)
df <- data.frame("Average temp" = avg,"Month" = as.numeric(substring(names(avg),1,2)),"Year" = as.numeric(substring(names(avg),3)),row.names = NULL)
df
t.test(x = Water.Temp,alternative = "two.sided",mu = 12,conf.level = .99)
plotdata <-planktondata %>%
count(Region) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
# plot the bars as percentages,
# in decending order with bar labels
ggplot(plotdata,
aes(x = reorder(Region, -pct),
y = pct)) +
geom_bar(stat = "identity",
fill = "indianred3",
color = "black") +
geom_text(aes(label = pctlabel),
vjust = -0.25) +
scale_y_continuous(labels = percent) +
labs(x = "Region",
y = "Percent",
title  = "A bar plot for Region")
#Non effectives
plotdata <-planktondata %>%
count(Alexandrium.Sp) %>%
mutate(pct = n / sum(n),
pctlabel = paste0(round(pct*100), "%"))
# plot the bars as percentages,
# in decending order with bar labels
ggplot(plotdata,
aes(x = reorder(Alexandrium.Sp, -pct),
y = pct)) +
geom_bar(stat = "identity",
fill = "indianred3",
color = "black") +
geom_text(aes(label = pctlabel),
vjust = -0.25) +
scale_y_continuous(labels = percent) +
labs(x = "Alexandrium.Sp",
y = "Percent",
title  = "A bar plot for Alexandrium.Sp")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
plkt <- read.csv("plankton.csv")
attach(plkt)
group <- paste(month,year)
avg <- tapply(Water.Temp, group, mean)
df <- data.frame("Average temp" = avg,"Month" = as.numeric(substring(names(avg),1,2)),"Year" = as.numeric(substring(names(avg),3)),row.names = NULL)
df
rm(list = ls())
rm(list = ls())
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
reticulate::repl_python()
install.packages("reticulate")
reticulate::py_config()
exit
reticulate::repl_python()
reticulate::py_config()
exit
install.packages("reticulate")
install.packages("reticulate")
reticulate::py_config()
reticulate::py_config()
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "my_env/bin/python")
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "\my_env")
Sys.setenv(RETICULATE_PYTHON = "my_env")
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "C:\Users\Samuel Effiong\Desktop\datascience python\my_env")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/Samuel Effiong/Desktop/datascience python/my_env")
reticulate::py_config()
reticulate::py_config()
Sys.setenv(RETICULATE_PYTHON = "my_env/Scripts/python.exe")
reticulate::py_config()
reticulate::py_config()
reticulate::repl_python()
rm(ls())
exit
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
import pandas as pd
reticulate::repl_python()
exit
reticulate::repl_python()
import pandas
planktondata = pandas.read_csv("plankton.csv")
planktondata = read_csv("plankton.csv")
planktondata = pandas("plankton.csv")
planktondata = ("plankton.csv")
planktondata
library(reticulate)
exit
library(reticulate)
reticulate::repl_python()
import pandas
planktondata = ("plankton.csv")
planktondata
os <- import("os")
exit
reticulate::repl_python()
library(reticulate)
os <- import("os")
planktondata = import(plankton.csv)
path <- "C:/Users/Samuel Effiong/Desktop/datascience python/plankton.csv"
planktondata <- read.csv(path, header = FALSE)
1+1
700*565
names["Sample","Pseudonitzschia.A.Sp","Alexandrium.Sp","Robgordia.Sp","Water.Temp","Species","Region","Site","day","month","year","period"])
# contents of the csv file
print (content)
rm(list = ls())
library(pacman)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pander)
library(corrr)
library(scales)
library(yaml)
knitr::opts_chunk$set(echo = FALSE)
planktondata=read.csv(file.choose(),header=T)
planktondata=read.csv(file.choose(),header=T)
planktondata %>%
summarize(PLANKTONDATASET ="RESULT",Pseudonitzschia.A.Sp= mean(Pseudonitzschia.A.Sp),
Alexandrium.Sp = mean(Alexandrium.Sp),
Robgordia.Sp=mean(Robgordia.Sp),
Water.Temp= mean(Water.Temp)) %>%
pander()
planktondata %>%
summarize(PLANKTONDATASET ="RESULT",Pseudonitzschia.A.Sp= median(Pseudonitzschia.A.Sp),
Alexandrium.Sp = median(Alexandrium.Sp),
Robgordia.Sp=median(Robgordia.Sp),
Water.Temp= median(Water.Temp)) %>%
pander()
planktondata %>%
summarize(PLANKTONDATASET ="RESULT",Pseudonitzschia.A.Sp= sd(Pseudonitzschia.A.Sp),
Alexandrium.Sp = sd(Alexandrium.Sp),
Robgordia.Sp=sd(Robgordia.Sp),
Water.Temp= sd(Water.Temp)) %>%
pander()
### SETTING THE SYSTEM working directory
#### confirm the  SYSTEM working directory
getwd()
## clear all old environmental variables
rm(list=ls())
library(dplyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
correlation <- cor(OZONE$Radiation , OZONE$Temperature, OZONE$Windspeed)
circulatory_respiratory_diseases <- data.frame(OZONE = c(2.76,2.76,4.00,4.79,3.11,4.00,2.52,3.94,3.42,4.27,3.39,3.11,2.35,4.50,3.61,10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4),
Radiation = c(230,259,253,207,322,173,7,285,314,197,323,193,238,189,95,294,223,279,14,225,275,83,212,77,27,284,131,276,190,291),
Temperature = c(75,76,83,90,68,83,74,84,83,92,87,70,64,93,87,86,79,76,71,94,86,81,79,82,76,72,76,88,67,90),
Windspeed = c(10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4,8.6,5.7,7.4,9.2,2.3,7.4,6.9,9.7,7.4,10.3,20.7,8.0,5.1,7.4,13.8) )
correlation <- cor(OZONE$Radiation , OZONE$Temperature, OZONE$Windspeed)
correlation <- cor(OZONE$Radiation , OZONE$Temperature, OZONE$Windspeed)
correlation <- cor(OZONE$Radiation , OZONE$Temperature, OZONE$Windspeed)
correlation <- cor(OZONE$Radiation, OZONE$Temperature, OZONE$Windspeed)
ozone <- data.frame(ZONE=c(2.76,2.76,4.00,4.79,3.11,4.00,2.52,3.94,3.42,4.27,3.39,3.11,2.35,4.50,3.61,10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4))
predict <- predict.lm(model, data = ozone )
model <- lm(OZONE~ Radiation + Temperature + Windspeed, data = circulatory_respiratory_diseases)
summary(model)
ozone <- data.frame(ZONE=c(2.76,2.76,4.00,4.79,3.11,4.00,2.52,3.94,3.42,4.27,3.39,3.11,2.35,4.50,3.61,10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4))
predict <- predict.lm(model, data = ozone )
predict
correlation <- cor(OZONE$Radiation, OZONE$Temperature, OZONE$Windspeed)
rounding_coreleation  <- round(cor(circulatory_respiratory_diseases))
rounding_coreleation
correlation <- cor(circulatory_respiratory_diseases)
correlation
correlation <- cor(circulatory_respiratory_diseases)
correlation
hist(circulatory_respiratory_diseases)
hist(OZONE$Radiation)
circulatory_respiratory_diseases <- data.frame(OZONE = c(2.76,2.76,4.00,4.79,3.11,4.00,2.52,3.94,3.42,4.27,3.39,3.11,2.35,4.50,3.61,10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4),
Radiation = c(230,259,253,207,322,173,7,285,314,197,323,193,238,189,95,294,223,279,14,225,275,83,212,77,27,284,131,276,190,291),
Temperature = c(75,76,83,90,68,83,74,84,83,92,87,70,64,93,87,86,79,76,71,94,86,81,79,82,76,72,76,88,67,90),
Windspeed = c(10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4,8.6,5.7,7.4,9.2,2.3,7.4,6.9,9.7,7.4,10.3,20.7,8.0,5.1,7.4,13.8) )
hist(OZONE$Radiation)
model <- lm(OZONE~ Radiation + Temperature + Windspeed, data = circulatory_respiratory_diseases)
summary(model)
hist(OZONE~Radiation)
plot(OZONE~ Radiation + Temperature + Windspeed, data = circulatory_respiratory_diseases)
hist(OZONE~ Radiation + Temperature + Windspeed, data = circulatory_respiratory_diseases)
par(mfrow = c(2,2))
plot(model)
par(mfrow=c(1,1))
hist(model)
hist.default(model)
hist(circulatory_respiratory_diseases)
rounding_coreleation  <- round(cor(model))
rounding_coreleation  <- round(cor(circulatory_respiratory_diseases))
rounding_coreleation
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation ,Temperature, Windspeed, y= Ozone)) + geom_point()
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation ,Temperature, Windspeed, y=OZONE)) + geom_point()
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation,Temperature,Windspeed, y=OZONE)) + geom_point()
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot
Ozoneplot =  ggplot(model, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict))
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict))
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= Radiation), size =1.25)
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= Radiation), size =1.25)
Ozoneplot = Ozoneplot + theme_bw()+ labs(title = "positive relationship between the amount of ozone in the air and increased mortality from circulatory and respiratory diseases",
x = "Radiation, Temperature, Windspeed",
y = "OZONE",
color = "Radiation, Temperature, Windspeed")
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= Radiation), size =1.25)
Ozoneplot = Ozoneplot + theme_bw()+ labs(title = "positive relationship between the amount of ozone in the air and increased \n mortality from circulatory and respiratory diseases",
x = "Radiation, Temperature, Windspeed",
y = "OZONE",
color = "Radiation, Temperature, Windspeed")
Ozoneplot
### SETTING THE SYSTEM working directory
#### confirm the  SYSTEM working directory
getwd()
## clear all old environmental variables
rm(list=ls())
library(dplyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
circulatory_respiratory_diseases <- data.frame(OZONE = c(2.76,2.76,4.00,4.79,3.11,4.00,2.52,3.94,3.42,4.27,3.39,3.11,2.35,4.50,3.61,10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4),
Radiation = c(230,259,253,207,322,173,7,285,314,197,323,193,238,189,95,294,223,279,14,225,275,83,212,77,27,284,131,276,190,291),
Temperature = c(75,76,83,90,68,83,74,84,83,92,87,70,64,93,87,86,79,76,71,94,86,81,79,82,76,72,76,88,67,90),
Windspeed = c(10.9,15.5,7.4,8.0,11.5,4.6,6.9,6.3,10.9,5.1,11.5,6.9,12.6,4.6,7.4,8.6,5.7,7.4,9.2,2.3,7.4,6.9,9.7,7.4,10.3,20.7,8.0,5.1,7.4,13.8) )
correlation <- cor(circulatory_respiratory_diseases)
correlation
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= ozone), size =1.25)
model <- lm(OZONE~ Radiation + Temperature + Windspeed, data = circulatory_respiratory_diseases)
summary(model)
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= ozone), size =1.25)
Ozoneplot = Ozoneplot + theme_bw()+ labs(title = "positive relationship between the amount of ozone in the air and increased \n mortality from circulatory and respiratory diseases",
x = "Radiation, Temperature, Windspeed",
y = "OZONE",
color = "Radiation, Temperature, Windspeed")
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= OZONE), size =1.25)
Ozoneplot = Ozoneplot + theme_bw()+ labs(title = "positive relationship between the amount of ozone in the air and increased \n mortality from circulatory and respiratory diseases",
x = "Radiation, Temperature, Windspeed",
y = "OZONE",
color = "Radiation, Temperature, Windspeed")
Ozoneplot
Ozoneplot =  ggplot(circulatory_respiratory_diseases, aes(x= Radiation, y=OZONE)) + geom_point()
Ozoneplot = Ozoneplot + geom_line(data = model, aes(x=Radiation, y = predict, color= Radiation), size =1.25)
Ozoneplot = Ozoneplot + theme_bw()+ labs(title = "positive relationship between the amount of ozone in the air and increased \n mortality from circulatory and respiratory diseases",
x = "Radiation, Temperature, Windspeed",
y = "OZONE",
color = "Radiation, Temperature, Windspeed")
Ozoneplot
#===========================================================
# Define the data
x = c(61, 39, 70, 63, 83, 76, 48, 72, 54, 22, 67, 60)
y = c(83, 62, 76, 77, 89, 74, 48, 78, 76, 51, 63, 79)
# Create a data frame
data_text <- data.frame(x, y)
# Perform regression analysis
model <- lm(y ~ x, data = data_text)
# Print the summary of the regression model
sumarry <- summary(model)
sumarry
####################################################
# AUTOMATIC APPROCH below
##############################################################################
# correlation
correlation <- cor(x, y)
correlation
# Extract the coefficient 'b'
b <- coef(model)[[2]]
b
# Print the coefficients
coefficients <- coef(model)
a <- coefficients[2]  # Coefficient for variable 'a'
a
a <- coefficients[1]  # Coefficient for variable 'a'
a
mean_x <- mean(x)
mean_y <- mean(y)
#==============================
#Step 3: Calculate the deviations from the means:
dev_x <- x - mean_x
dev_y <- y - mean_y
#==================================
#Step 4: Calculate the sum of squared deviations:
sum_sq_dev_x <- sum(dev_x^2)
sum_sq_dev_y <- sum(dev_y^2)
cross_prod_dev <- sum(dev_x * dev_y)
#============
# Step 6: Calculate the slope b:
b <- cross_prod_dev / sum_sq_dev_x
b
# Step 7: Calculate the intercept a:
a <- mean_y - b * mean_x
cat("Intercept (a):", a, "\n")
cat("Slope (b):", b, "\n")
# Print the summary of the regression model
sumarry <- summary(model)
sumarry
cross_prod_dev
dev_x
sum_sq_dev_x
rm(list=ls())
#=======================================================
# Useful package for current .
# install.packages("wavethresh")
library(wavethresh)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = ..density..))+
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), color = "red", size = 2)
})
###################################################
#### USING THE APPLY FUNCTION
reps <- 50000
nexps <- 5
rate <- 0.1
set.seed(0)
system.time(x1 <- replicate(reps, sum(rexp(n = nexps, rate = rate))))
head(x1)
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = ..density..))+
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), color = "red", size = 2)
})
#=======================================================
# Useful package for current .
# install.packages("wavethresh")
library(wavethresh)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = ..density..))+
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), color = "red", size = 2)
})
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = ..density..)),bins = 30 +
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), color = "red", size = 2)
})
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = ..density..))+
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), bins = 30 ,color = "red", size = 2)
})
############################# LATEST WAY TO WRITE DENSITY
suppressWarnings({
ggplot(data.frame(x1), aes(x1))+
geom_histogram(aes(y = after_stat(density)))+
stat_function(fun = function(x)dgamma(x, shape = nexps, scale =1/rate), bins = 30 ,color = "red", size = 2)
})
###       b simple apply OR set.seed(0)
system.time(x1 <- sapply(1 :reps, function(i)sum(rexp(n = nexps, rate = rate))))
#q3
data <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/pratical resource/.RData")
data
load("mystery_samples.RData")
load("clsss data.RData")
load("clsss data.csv")
load("pokemon.csv")
data1 <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/pratical resource/pokemon.csv")
# Now load data that has been sampled from a “mystery” distribution.
data <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/pratical resource/.RData")
data
data1 <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/leture 1/clsss data.csv")
data1 <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/leture 1/pokemon.csv")
# Now load data that has been sampled from a “mystery” distribution.
data <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/pratical resource/.RData")
data
################################################################
# Create some example data
x <- 1:10
Da
y <- letters[1:10]
################################################################
# Create some example data
x <- 1:10
y <- letters[1:10]
mystery_samples <- data.frame(x, y)
# Save the objects into an .RData file
save(x, y, mystery_samples, file = "data.RData")
# Now load data that has been sampled from a “mystery” distribution.
data <- load("C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/pratical resource/.RData")
data
head(data)
load("data.RData")
x
mystery_samples
head(mystery_samples)
#########
######### GENERATIONG NORMAL RANDOM VARIABLES
#We will warm up by generating some random normal variables. Generate 1000 samples from the N(0, 1) distribution
#q1
samples <- rnorm(1000, 0, 1)
samples
# Generate 1000 samples from the N(0, 1) distribution
samples <- rnorm(1000, 0, 1)
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line()
# Display the Q-Q plot
qq_plot
save(qq_plot, samples, file = "mystery_samples.RData")
load(mystery_samples.RData)
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples)) +
stat_qq() +
stat_qq_line()
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples), xlab ="SAMPLES", ylab="SAMPLES", main="Q-Q PLOT") +
stat_qq() +
stat_qq_line()
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples), xlab ="SAMPLES", ylab="SAMPLES", main="Q-Q PLOT") +
stat_qq() +
stat_qq_line()
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples), xlab="SAMPLES", ylab="SAMPLES") +
stat_qq() +
stat_qq_line()+
ggtitle(Q-Q PLOT)
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples), xlab="SAMPLES", ylab="SAMPLES") +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q PLOT")
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples)) +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q PLOT")
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples ,color=samples)) +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q PLOT")
# Display the Q-Q plot
qq_plot
# Create a Q-Q plot using ggplot2
qq_plot <- ggplot(data.frame(samples), aes(sample = samples)) +
xlab("Theoretical Quantiles") +
ylab("Sample Quantiles") +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q PLOT")
# Display the Q-Q plot
qq_plot
# Solution
inferential_sta <-  pnorm(85, mean = 92, sd = 8)
inferential_sta
inferential_sta2 <- 1 - pnorm(85, mean = 92, sd = 8)
inferential_sta2
setwd(dir='C:/Users/Samuel Effiong/Desktop/statistical computing 2 .. sta 418/leture 1')
